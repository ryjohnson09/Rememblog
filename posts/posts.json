[
  {
    "path": "posts/2021-11-23-a-gentle-intro-to-package-management-in-r/",
    "title": "A Gentle Intro to Package Management in R",
    "description": "R packages are what truly make R great! This primer will make sure you know exactly where you are installing packages from (what repositories), and where you are installing them to on your computer/server (what libraries).",
    "author": [
      {
        "name": "Ryan Johnson",
        "url": {}
      }
    ],
    "date": "2021-11-23",
    "categories": [],
    "contents": "\n\nContents\nInstalling your first R package\nUnderstanding your Package Environment\nRepositories\nLibraries\nRecap\n\n\nInstalling your first R package\nFor this example, we‚Äôll focus on ggplot2, which is a popular R package for data visualization. Let‚Äôs first try to load the package.\n\n\n# Try loading ggplot2\nlibrary(\"ggplot2\")\n\n\n\nIf running this command for the first time, you‚Äôll likely see the output below:\n\nError in library(\"ggplot2\") : there is no package called ‚Äòggplot2‚Äô\n\nThis is because we have not yet installed ggplot2. Most packages in R can be installed using the install.packages() function:\n\n\n# Install ggplot2\ninstall.packages(\"ggplot2\")\n\n\n\nYou may see some logs printed to the screen, but as long as you don‚Äôt see any errors, then ggplot2 was likely installed correctly. To ensure that ggplot2 has been properly installed, we can check which version of ggplot2 was installed:\n\n\n# Check ggplot2 version\npackageVersion(\"ggplot2\")\n\n\n[1] '3.3.5'\n\nLet‚Äôs now try to load ggplot2 again:\n\n\n# Try loading ggplot2 again\nlibrary(\"ggplot2\")\n\n\n\nTo recap:\ninstall.packages(): installs a package. Think of it as ‚Äúbuying a car.‚Äù\nlibrary(): loads a package. Think of it as ‚Äúturning on the car.‚Äù\nNow that ggplot2 is ‚Äúturned on‚Äù, we can now utilize the various functions within ggplot2. You can be explicit with your function calls by giving it the package:: prefix. For example, ggplot2::qplot() tells the R interpreter to use the qplot() function within the ggplot2 package.\n\n\nggplot2::qplot(x = mpg, y = wt, data = mtcars)\n\n\n\n\nYou may see R code that does not use the package:: prefix, which is fine, but it‚Äôs recommended to prevent namespace issues. For example, what if the function qplot() also existed in another package in your environment üòØ?\nUnderstanding your Package Environment\nRepositories\nWhen we ran the install.packages(\"ggplot2\") function above, we had to install ggplot2 from somewhere‚Ä¶but where? To revisit the above car analogy, imagine you need to buy a new car. At some point you‚Äôll likely find yourself at a car dealership where you‚Äôll purchase a new car. If the new car is our ‚Äúpackage‚Äù, the car dealership is our repository. To see where we went shopping for our ggplot2 package, we can run the options(\"repos\") function to list the repositories currently available in our environment:\n\n\n# Let's list our repositories\noptions(\"repos\")\n\n\n$repos\n[1] \"https://packagemanager.rstudio.com/cran/latest\"\n\nKeep in mind that your repositories will likely be different than mine!\nLibraries\nWhen you buy a new car from a dealership, you drive it home and park it in your garage. Similarly, when you install a new package from a repository, you need to park it somewhere in your environment. The garages for R packages are known as libraries. Libraries in your R environment are nothing but files on your computer/server. Let‚Äôs see what libraries are currently in our environment by running the .libPaths() function:\n\n\n# Where are my R package libraries?\n.libPaths()\n\n\n[1] \"/usr/local/lib/R/4.1/site-library\"      \n[2] \"/usr/local/Cellar/r/4.1.1/lib/R/library\"\n\nSome notes regarding libraries:\nR libraries are tied to R versions (eg. R-4.1). If you install a new version of R, a fresh library will be created\nThere are three types of libraries: System, User, and Project libraries.\nSystem: If running R locally on a desktop, this is the default ‚Äúhome‚Äù library and is manged by the user themselves. If running on a server (e.g., RStudio Workbench), this is a common library shared among all users and is configured/managed by your system administrator.\nUser: On RStudio Workbench, this is the default ‚Äúhome‚Äù directory managed by the user themselves.\nProject: If using renv, then all packages associated with that RStudio Project will be saved into the renv directory and is managed by the user.\n\nUse the Packages tab to see what libraries you are using and what packages are within each.\n\n\n\nRecap\nHopefully, with this small example, you have a better understanding of R packages, where they come from (repositories), how to install/use them, and where they are stored (libraries). Let‚Äôs recap the above steps:\nWe installed the ggplot2 using the install.packages(\"ggplot2\") function.\nggplot2 was ‚Äúpurchased‚Äù from an R repository. Your current repositories can be listed using the options(\"repos\") function.\nOnce obtained from the repository, it was then saved to an R library on our system.\nWe then loaded the ggplot2 packages into our environment using the library(\"ggplot2\") function.\nOnce loaded, we can then call functions from within ggplot2 including ggplot2::qplot().\n\n\n\n",
    "preview": "posts/2021-11-23-a-gentle-intro-to-package-management-in-r//images/libraries.jpg",
    "last_modified": "2021-11-23T09:43:41-05:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to A gentle intro to Package Management in R",
    "description": "Welcome to our new blog, A gentle intro to Package Management in R. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Nora Jones",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-11-23",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-11-23T08:42:10-05:00",
    "input_file": {}
  }
]
